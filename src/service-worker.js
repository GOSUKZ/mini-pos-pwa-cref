/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for more information on the Workbox API.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { BackgroundSyncPlugin } from 'workbox-background-sync';

// Claim any currently available clients once the service worker becomes active
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this is a request for an image, CSS, JavaScript, or any file with an extension, skip.
    if (request.mode !== 'navigate') {
      return false;
    }
    if (url.pathname.startsWith('/_')) {
      return false;
    }
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }
    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

// Cache the underlying font files with a cache-first strategy for 1 year.
registerRoute(
  ({ url }) => url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
        maxEntries: 30,
      }),
    ],
  })
);

// Cache CSS, JS, and Web Worker files with a stale-while-revalidate strategy
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'worker',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
      }),
    ],
  })
);

// Cache images with a cache-first strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
      }),
    ],
  })
);

// API calls with network-first strategy
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-responses',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [200],
      }),
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60 * 24, // 1 day
      }),
    ],
  })
);

// Background sync for offline invoice creation
const bgSyncPlugin = new BackgroundSyncPlugin('invoice-queue', {
  maxRetentionTime: 24 * 60 // Retry for up to 24 Hours (specified in minutes)
});

// Register route for invoice API requests
registerRoute(
  ({ url }) => url.pathname.includes('/invoices'),
  new NetworkFirst({
    cacheName: 'invoice-apis',
    plugins: [
      bgSyncPlugin,
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  }),
  'POST'
);

// Create a custom offline page for when network is unavailable
registerRoute(
  ({ url }) => url.pathname === '/offline',
  new CacheFirst({
    cacheName: 'offline-page',
  })
);

// Handle errors
self.addEventListener('error', (event) => {
  console.error('Service Worker error:', event.error);
});

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Show a notification when the user has no network connection
self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate' && !navigator.onLine) {
    event.respondWith(
      caches.match('/offline')
        .then((response) => {
          return response || caches.match(process.env.PUBLIC_URL + '/index.html');
        })
    );
  }
});

// Push notifications
self.addEventListener('push', (event) => {
  const data = event.data.json();

  const title = data.title || 'POS System';
  const options = {
    body: data.body || 'New notification',
    icon: '/logo192.png',
    badge: '/logo192.png',
    data: {
      url: data.url || '/'
    },
    actions: data.actions || []
  };

  event.waitUntil(
    self.registration.showNotification(title, options)
  );
});

// Handle notification click
self.addEventListener('notificationclick', (event) => {
  const notification = event.notification;
  const action = event.action;
  const url = notification.data.url;

  notification.close();

  // Handle specific actions
  if (action === 'open') {
    event.waitUntil(
      clients.matchAll({ type: 'window' }).then((clientList) => {
        // If a window client is already open, focus it
        for (const client of clientList) {
          if (client.url === url && 'focus' in client) {
            return client.focus();
          }
        }
        // Otherwise open a new window
        return clients.openWindow(url);
      })
    );
  }
});

// Queue up failed operations for when connectivity returns
class OfflineQueue {
  constructor() {
    this.queue = [];

    // Load any previously saved operations from IndexedDB
    this.loadQueue();

    // Monitor online status and process queue when back online
    self.addEventListener('online', () => {
      this.processQueue();
    });
  }

  // Add operation to queue
  add(operation) {
    this.queue.push(operation);
    this.saveQueue();
  }

  // Process all queued operations
  async processQueue() {
    if (navigator.onLine && this.queue.length > 0) {
      console.log('Processing offline queue:', this.queue.length, 'operations');

      // Process each operation
      for (let i = 0; i < this.queue.length; i++) {
        const operation = this.queue[i];

        try {
          // Attempt to send the operation to the server
          await fetch(operation.url, {
            method: operation.method,
            headers: operation.headers,
            body: operation.body
          });

          // Remove successful operation from queue
          this.queue.splice(i, 1);
          i--;

          console.log('Processed offline operation successfully');
        } catch (error) {
          console.error('Failed to process offline operation:', error);

          // If still offline, keep in queue and try again later
          if (!navigator.onLine) {
            break;
          }
        }
      }

      // Save updated queue
      this.saveQueue();

      // If any operations were processed, notify user
      if (this.queue.length === 0) {
        this.showNotification('All offline operations processed successfully!');
      }
    }
  }

  // Save queue to IndexedDB
  saveQueue() {
    // Implementation would use IndexedDB to persist the queue
    // Example using localStorage for simplicity
    localStorage.setItem('offlineQueue', JSON.stringify(this.queue));
  }

  // Load queue from IndexedDB
  loadQueue() {
    // Implementation would use IndexedDB to retrieve the queue
    // Example using localStorage for simplicity
    const saved = localStorage.getItem('offlineQueue');
    if (saved) {
      try {
        this.queue = JSON.parse(saved);
      } catch (error) {
        console.error('Failed to parse offline queue:', error);
        this.queue = [];
      }
    } else {
      this.queue = [];
    }
  }

  // Show notification to user
  showNotification(message) {
    self.registration.showNotification('POS System', {
      body: message,
      icon: '/logo192.png'
    });
  }
}

// Initialize offline queue
const offlineQueue = new OfflineQueue();

// Add failed fetch operations to the queue
self.addEventListener('fetch', (event) => {
  // Only handle API requests that modify data
  if (event.request.method !== 'GET' && event.request.url.includes('/api/')) {
    event.respondWith(
      fetch(event.request.clone())
        .catch((error) => {
          // If offline, add to queue for later processing
          if (!navigator.onLine) {
            event.request.clone().text().then(body => {
              offlineQueue.add({
                url: event.request.url,
                method: event.request.method,
                headers: Array.from(event.request.headers.entries()),
                body: body
              });
            });

            // Return a custom offline response
            return new Response(JSON.stringify({
              error: 'You are currently offline. Your changes will be saved when you reconnect.',
              isOffline: true
            }), {
              headers: { 'Content-Type': 'application/json' }
            });
          }

          throw error;
        })
    );
  }
});